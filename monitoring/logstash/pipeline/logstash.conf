input {
  beats {
    port => 5044
  }
  
  # Application logs
  file {
    path => "/var/log/app/*.log"
    type => "application"
    codec => json
    start_position => "beginning"
  }
  
  # Database logs
  file {
    path => "/var/log/postgres/*.log"
    type => "database"
    start_position => "beginning"
  }
  
  # WAF logs (Cloudflare)
  http {
    port => 5000
    codec => json
    type => "waf"
  }
  
  # System logs
  syslog {
    port => 5014
    type => "system"
  }
}

filter {
  # Application log processing
  if [type] == "application" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}" }
    }
    
    # Parse HTTP request logs
    if [message] =~ /HTTP/ {
      grok {
        match => { "message" => "%{WORD:method} %{URIPATH:path} HTTP/%{NUMBER:http_version} %{NUMBER:status_code} %{NUMBER:response_time}" }
      }
    }
    
    # Detect security events
    if [message] =~ /(login failed|unauthorized|blocked|rate limit|sql injection|xss|csrf)/i {
      mutate {
        add_tag => ["security_event"]
      }
    }
    
    # Parse authentication events
    if [message] =~ /authentication|login|logout/ {
      mutate {
        add_tag => ["auth_event"]
      }
    }
    
    # Parse error events
    if [level] == "ERROR" or [level] == "FATAL" {
      mutate {
        add_tag => ["error_event"]
      }
    }
  }
  
  # WAF log processing
  if [type] == "waf" {
    # Parse Cloudflare WAF logs
    if [ClientIP] {
      mutate {
        add_field => { "client_ip" => "%{ClientIP}" }
      }
    }
    
    # Detect blocked requests
    if [Action] == "block" or [Action] == "challenge" {
      mutate {
        add_tag => ["waf_blocked"]
      }
    }
    
    # Parse attack types
    if [RuleId] {
      if [RuleId] =~ /sqli/ {
        mutate { add_tag => ["sql_injection"] }
      }
      if [RuleId] =~ /xss/ {
        mutate { add_tag => ["xss_attack"] }
      }
      if [RuleId] =~ /rce/ {
        mutate { add_tag => ["rce_attack"] }
      }
    }
  }
  
  # Database log processing
  if [type] == "database" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:timezone} \[%{NUMBER:process_id}\] %{LOGLEVEL:level}: %{GREEDYDATA:message}" }
    }
    
    # Parse connection events
    if [message] =~ /connection/ {
      mutate {
        add_tag => ["db_connection"]
      }
    }
    
    # Parse query events
    if [message] =~ /statement|execute/ {
      mutate {
        add_tag => ["db_query"]
      }
    }
    
    # Parse error events
    if [level] == "ERROR" or [level] == "FATAL" {
      mutate {
        add_tag => ["db_error"]
      }
    }
  }
  
  # Common enrichment
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Add timestamp if not present
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }
  
  # Parse timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  # Add environment info
  mutate {
    add_field => { "environment" => "${ENVIRONMENT:production}" }
    add_field => { "service" => "escashop" }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "escashop-%{type}-%{+YYYY.MM.dd}"
  }
  
  # Debug output
  if [type] == "application" and "error_event" in [tags] {
    stdout {
      codec => rubydebug
    }
  }
  
  # Security alerts
  if "security_event" in [tags] or "waf_blocked" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "escashop-security-alerts-%{+YYYY.MM.dd}"
    }
  }
}
